# -*- coding: utf-8 -*-
"""Submission Sistem Rekomendasi

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qi-FIIHf1vhTi-r3oJi5QvehST8pH_wh

# **Data Diri**

- Nama : Bagas Aqmal Febrianto
- Email : bagasaqmal70@gmail.com

# Import Library
"""

!pip install langdetect

from google.colab import files
import pandas as pd
import numpy as np
from langdetect import detect
from langdetect.lang_detect_exception import LangDetectException
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics.pairwise import cosine_similarity
from scipy.sparse import hstack
from scipy.sparse import csr_matrix

"""# Data Load

**Informasi Dataset**

Dataset ini merupakan dataset Course Udemy.

Link Dataset : https://www.kaggle.com/datasets/jilkothari/finance-accounting-courses-udemy-13k-course
"""

files.upload()

!mkdir -p ~/.kaggle

# Pindahkan kaggle.json ke direktori .kaggle
!mv kaggle.json ~/.kaggle/

# Berikan izin ke file agar bisa digunakan
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d jilkothari/finance-accounting-courses-udemy-13k-course
!unzip finance-accounting-courses-udemy-13k-course.zip

df = pd.read_csv('udemy_output_All_Finance__Accounting_p1_p626.csv')

"""# Data Understanding

## **Deskripsi Variabel**

Berikut ini dalah penjelasan dari fitur yang terdapat pada dataset :

- id : ID kursus dari kursus tersebut.

- title : Menampilkan nama unik dari kursus yang tersedia dalam kategori pengembangan di Udemy.

- url : Memberikan URL atau tautan ke kursus tersebut.

- is_paid : Mengembalikan nilai boolean (Benar/Salah) yang menunjukkan apakah kursus tersebut berbayar (True) atau gratis (False).

- num_subscribers : Menampilkan jumlah orang yang telah berlangganan kursus tersebut.

- avg_rating : Menampilkan nilai rata-rata dari rating kursus secara keseluruhan.

- avg_rating_recent : Menunjukkan perubahan rata-rata rating terbaru (dalam periode waktu tertentu).

- num_reviews : Memberikan gambaran tentang jumlah ulasan (rating + review) yang telah diterima oleh kursus tersebut.

- num_published_lectures : Menampilkan jumlah materi/ceramah yang ditawarkan oleh kursus.

- num_published_practice_tests : Memberikan gambaran mengenai jumlah soal latihan yang disediakan oleh kursus.

- created : Waktu pembuatan kursus.

- published_time : Waktu ketika kursus tersebut dipublikasikan di Udemy.

- discounted_price_amount : Harga diskon yang sedang ditawarkan untuk kursus tersebut.

- discounted_price_currency : Mata uang yang digunakan untuk harga diskon tersebut.

- price_detail_amount : Harga asli (sebelum diskon) dari kursus.

- price_detail_currency : Mata uang yang digunakan untuk harga asli kursus tersebut.
"""

df

df.info()

"""Tampak bahwa jumlah data yang tersedia sebanyak 13608 baris dengan 20 kolom didalamnya.

## Pengecekan Missing Value
"""

print('jumlah course:', len(np.unique(df['id'])))

df.isnull().sum()

"""Jika diperhatikan pada informasi diatas, didapatkan missing value dibeberapa fitur, seperti :
- discount_price__amount  = 1403
- discount_price__currency = 1403
- discount_price__price_string = 1403
- price_detail__amount = 497
- price_detail__currency = 497
- price_detail__price_string = 497

**Memeriksa kolom Rating**
"""

df['rating'].value_counts()

"""Jika diperhatikan kolom rating memiliki nilai antara 0 - 5. Data yang memiliki rating 0 dapat dikatakan bahwa course tersebut belum pernah dilakukan pembelian sehingga belum ada yang memiliki rating.

**Memeriksa Kolom is_paid**
"""

df['is_paid'].isnull().sum()

pip install langdetect

"""## Exploratory Data Analysis"""

pd.set_option('display.max_columns', None)

df.head()

df.describe()

"""Tampak bahwa data terlihat aman atau tidak ada yang aneh dari analisis deskriptif diatas.

#### Multivariate

**Top 5 Course dengan jumlah subscriber terbanyak**
"""

top5_subscribers = df.sort_values(by='num_subscribers', ascending=False).head(5)
top5_subscribers[['title', 'num_subscribers']]

plt.figure(figsize=(10, 6))
sns.barplot(x='title', y='num_subscribers', data=top5_subscribers)
plt.title('Top 5 Course Berdasarkan Jumlah Subscriber')
plt.xlabel('Judul Course')
plt.ylabel('Jumlah Subscriber')
plt.xticks(rotation=90)
plt.show()

"""Berdasarkan visualisasi diatas, didapatkan bahwa course terbanyak berdasarkan jumlah subscribernya adalah course dengan judul "An Entire MBA in 1 Course:Award Winning Busineness School Prof".

**Top 5 dan Bot 5 Course berdasarkan harga tertinggi**
"""

top5_amount = df.sort_values(by='price_detail__amount', ascending=False).head(5)
print("Top 5 Course")
print(top5_amount[['title', 'price_detail__amount']])

print("==="*20)

bot5_amount = df.sort_values(by='price_detail__amount', ascending=True).head(5)
print("Bottom 5 Course")
print(bot5_amount[['title', 'price_detail__amount']])

def plot_bar_chart(data, title):
    plt.figure(figsize=(10, 6))
    sns.barplot(x='title', y='price_detail__amount', data=data)
    plt.title(f'{title} Course Berdasarkan Harga')
    plt.xlabel('Judul Course')
    plt.ylabel('Harga')
    plt.xticks(rotation=90)
    plt.show()

plot_bar_chart(top5_amount, "Top 5")

"""Berdasarkan visualisasi diatas, tampak bahwa course dengan harga tertinggi berada pada course dngan judul "Simpel investieren für Finanzanfänger und Priv..." dan course dengan jumlah harga 12.800 lainnya."""

plot_bar_chart(bot5_amount, "Bottom 5")

"""Sedangkan course dengan harga terendah, dalah course dengan harga 1280. Contohnya seperti " 株式投資テクニカル入門「超初心者コース"

**Course dengan review terbanyak**
"""

top5_review = df.sort_values(by='num_reviews', ascending=False).head(5)
top5_review[['title', 'num_reviews']]

plt.figure(figsize=(10, 6))
plt.bar(top5_review['title'], top5_review['num_reviews'])
plt.title('Top 5 Course Berdasarkan Jumlah Review')
plt.xlabel('Judul Course')
plt.ylabel('Jumlah Review')
plt.xticks(rotation=90)

"""Course dengan jumlah review terbanyak ditempati oleh course dengan judul 	The Complete SQL Bootcamp 2020: Go from Zero t..." dengan total reivew sebesar 78006.

# Data Preparation

## Pembersihan Data

**Menangani Missing Value**
"""

df.isnull().sum()

df_cleaned = df.dropna()
df_cleaned.isnull().sum()

"""Pada tahap ini kita akan melakukan penghilangan nilai kosong, penghilangan nilai kolong ini dilakukan dengan cara menghapus Baris yang memiliki nlai kosong tersebut, hal ini dilakukan karena jumlah data yang cukup banyak dan tidak akan mempengaruhi proses selanjutnya jika dilakukan penghapusan pada data.

**Pembersihan pada kolom rating**
"""

df_cleaned['rating'].value_counts()

"""Data yang memiliki rating 0 dapat dikatakan bahwa course belum pernah dilakukan pembelian, Maka dari itu kita akan mengambil nilai rating yang >=1."""

df_cleaned = df_cleaned[df_cleaned['rating'] >= 1]

df_cleaned['rating'].value_counts()

"""Sekarang terlihat bahwa Course saat ini memiliki rating 1 - 5. Dalam artian course yang akan digunakan ini adalah course yang sudah pernah dilakukan pembelian sebelumnya.

## Feature Engineering

Pembuatan kolom bahasa ini dilakukan untuk nantinya melakukan filtering terhadap course yang akan digunakan, dengan kata lain. Course yang digunakan adalah course yang berbahasa inggris.


Pembuatan kolom bahasa ini memanfaatkan library langdetect untuk mendeteksi bahasa pada fitur title nantinya.
"""

# Buat fungsi untuk deteksi bahasa
def detect_language(text):
    try:
        return detect(text)
    except LangDetectException:
        return "error"

# Tambahkan kolom baru berisi hasil deteksi bahasa
df_cleaned['language'] = df_cleaned['title'].apply(detect_language)

# Tampilkan judul yang bukan bahasa Inggris (kode 'en')
non_english_titles = df_cleaned[df_cleaned['language'] != 'en']

# Tampilkan beberapa contohnya
print(non_english_titles[['title', 'language']].head(10))

"""## Seleksi Fitur

Pada bagian ini kita akan melakukan seleksi fitur yang digunakan. Pemilihan fitur didasarkan pada konsep Content-Based Filtering, di mana rekomendasi diberikan berdasarkan kemiripan konten atau atribut dari item (dalam hal ini, kursus), bukan berdasarkan perilaku pengguna lain.


Fitur yang dipilih yaitu:

- id – untuk identifikasi unik setiap kursus.

- title – merepresentasikan konten utama dari kursus dalam bentuk teks, yang digunakan untuk menghitung kemiripan antar kursus menggunakan metode seperti TF-IDF.

- rating – sebagai indikator kualitas berdasarkan penilaian pengguna, digunakan untuk memberikan bobot tambahan dalam sistem hybrid atau analisis preferensi.

- price_detail__amount – sebagai representasi nilai ekonomi kursus, dapat digunakan untuk menyesuaikan rekomendasi berdasarkan harga yang relevan dengan pengguna.

- language - sebagai filtering pada data yang menggunakan bahasa inggris
"""

df_col = [
    'id',
    'title',
    'rating',
    'price_detail__amount',
    'language'
]

df_new = df_cleaned[df_col]
df_new

"""## Filter Data Berdasarkan Bahasa

Selanjutnya kita akan melakukan filter terhadap data yang sudah dipilih berdasarkan fitur Bahasa. Dimana hal ini dilakukan aagar kita berfokus pada course yang menggunakan bahasa inggris.
"""

df_new = df_new[df_new['language']=='en']

df_new.info()

"""Tampak bahwa data yang bersih dan siap digunakan saat ini berjumlah 9761  baris dan 5 kolom. Namun perlu diketahui untuk kolom language nantinya tidak akan digunakan. Karena kolom tersebut hanya digunakan untuk melakukan filtering di tahap sebelumnya.

## Bersihkan judul dari spasi/tanda baca

Tahap ini dilakukan pembersihan sepasi dan tanda baca pada fitur title, dilakukan agar mengurangi kesalahan pada proses rekomendasi sebelum masuk ke tahap TFIDF
"""

df_new['title'] = df_new['title'].str.strip().str.lower()

"""## TF-IDF

Sebelum membangun sistem rekomendasi berbasis konten, diperlukan transformasi data teks (judul kursus) menjadi bentuk numerik agar dapat dihitung kemiripannya. Oleh karena itu, dilakukan proses ekstraksi fitur teks menggunakan TF-IDF (Term Frequency-Inverse Document Frequency) pada fitur title. Dalam hal ini stop_words juga digunakan untuk menghilangkan kata-kata umum dalam bahasa inggris.
"""

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(df_new['title'])

"""## Standarisasi fitur numerik

Selain fitur berbasis teks, kita juga memanfaatkan fitur numerik seperti rata-rata rating (avg_rating) dan harga kursus (price_detail__amount) untuk meningkatkan kualitas rekomendasi. Namun, karena skala nilai dari masing-masing fitur bisa sangat berbeda (misalnya, rating berkisar antara 0–5, sedangkan harga bisa mencapai ratusan dolar), maka perlu dilakukan proses normalisasi agar kedua fitur memiliki skala yang sebanding.

Pada tahap ini digunakan metode Min-Max Scaling untuk mengubah nilai dari setiap fitur ke dalam rentang 0 hingga 1. Tujuannya adalah agar tidak ada fitur yang mendominasi hasil perhitungan karena perbedaan skala yang besar.
"""

scaler = MinMaxScaler()
numerical_features = scaler.fit_transform(df_new[['rating','price_detail__amount']])

"""## Gabungkan Fitur hasil TF-IDF dengan Fitur Numerik

Penggabungan ini dilakukan karena kita menerapkan pendekatan Content-Based Filtering berbasis hybrid, di mana sistem rekomendasi tidak hanya mempertimbangkan kemiripan dari judul kursus, tetapi juga memperhitungkan aspek kuantitatif seperti rating dan harga kursus.

Agar data numerik bisa digabungkan dengan data TF-IDF (berbentuk sparse matrix), maka fitur numerik yang telah dinormalisasi terlebih dahulu diubah menjadi sparse matrix menggunakan csr_matrix. Kemudian, kita gabungkan kedua matrix menggunakan fungsi hstack() dari SciPy.
"""

numerical_sparse = csr_matrix(numerical_features)

# Gabungkan
hybrid_matrix = hstack([tfidf_matrix, numerical_sparse])

"""# Modeling and Results

## Pendekatan 1 : Hybrid Filtering

**Hybrid Filtering (Content-Based + Rating Weighting)**

Menggabungkan content-based filtering dengan bobot tambahan dari kolom rating dan price_detail__amount. Dalam pendekatan ini, hasil dari cosine similarity dimodifikasi agar mempertimbangkan rating dan harga.

Kelebihan :
- Menghasilkan rekomendasi yang tidak hanya mirip secara konten, tetapi juga berkualitas tinggi (rating).

- Dapat disesuaikan dengan preferensi pengguna (misal: harga murah atau rating tinggi).

- Lebih informatif dalam pengambilan keputusan.

Kekurangan :
- Lebih kompleks dalam implementasi.

- Perlu normalisasi data numerik agar bobot adil.

- Tidak cocok jika sebagian besar data rating atau price kosong.

### Cosine Similirity

Langkah selanjutnya adalah menghitung kemiripan antar kursus menggunakan Cosine Similarity.
"""

cosine_sim = cosine_similarity(hybrid_matrix, hybrid_matrix)

cosine_sim

"""Nilai hasil cosine similarity berada di antara 0 dan 1, di mana nilai 1 berarti sangat mirip dan 0 berarti tidak mirip sama sekali."""

cosine_sim_df = pd.DataFrame(
    cosine_sim,
    index=df_new['title'],
    columns=df_new['title']
)
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Dataframe diatas adalah salah satu matriks kesamaan antar course. Semakin mendekati angka 1 maka course dapat dikatakan memiliki kesamaan yang tinggi. Sebagai contoh, Course "how i used networking to triple my business in 6 months" memiliki kesamaan 54% dengan "drop shipping 2.0 (more traffic & less competition)"

### Mendapatkan Rekomendasi

Berikut ini adalah fungsi untuk mendapatkan rekomendasi berdasarkan judul course.
"""

def rekomendasi_kursus(title, cosine_sim_df, top_n=5):
    title = title.strip().lower()
    if title not in cosine_sim_df.index:
        print(f"Judul '{title}' tidak ditemukan.")
        return []

    scores = cosine_sim_df.loc[title].sort_values(ascending=False)[1:top_n+1]
    return list(zip(scores.index, scores.values))

judul = "hands-on hadoop masterclass - tame the big data!"
hasil = rekomendasi_kursus(judul, cosine_sim_df, top_n=5)

print(f"Rekomendasi untuk '{judul}':\n")
for i, (judul_rekom, skor) in enumerate(hasil, 1):
    print(f"{i}. {judul_rekom} | Similarity: {skor:.4f}")

"""Tampak bahwa pada percobaan diatas, ketika dimasukan judul sebuah course, didapatkan 5 rekomendasi dari yang tertinggi.

Input : "Big Data and Hadoop for Beginners - with Hands-on!"

Rekomendasi tertinggi : "The Ultimate Hands-On Hadoop - Tame your Big Data!"

dengan kesamaan 93%

## Pendekatan Umum (Cosine + TFIDF)

**Content-Based Filtering (TF-IDF + Cosine Similarity)**

Pendekatan ini menggunakan judul kursus (title) untuk menghitung kemiripan antar kursus berdasarkan teks menggunakan TF-IDF dan cosine similarity. Rekomendasi diberikan berdasarkan kemiripan konten.

Kelebihan:
- Tidak memerlukan data pengguna.

- Bisa merekomendasikan kursus baru selama judul tersedia.

- Relevan secara tematik karena berbasis konten.

Kekurangan:
- Tidak mempertimbangkan rating atau popularitas kursus.

- Kemiripan terbatas hanya pada teks, bisa menimbulkan bias jika judul kursus ambigu atau terlalu umum.

- Tidak bisa mengenali kursus yang bagus tapi dengan judul yang berbeda secara semantik.
"""

tfidf_matrix_2 = tfidf.fit_transform(df_new['title'])

tfidf_matrix_2.shape

tfidf_matrix_2.todense()

cosine_sim_2 = cosine_similarity(tfidf_matrix_2)
cosine_sim_2

cosine_sim_df_2 = pd.DataFrame(
    cosine_sim_2,
    index=df_new['title'],
    columns=df_new['title']
)
print('Shape:', cosine_sim_df_2.shape)

cosine_sim_df_2.sample(5, axis=1).sample(10, axis=0)

"""Dengan menggunakan pendekatan yang sama seperti sebelumnya namun dengan fitur yang berbeda, terlihat bahwa nilai cosine similarity yang dihasilkan cenderung rendah dan mendekati nol. Hal ini menunjukkan bahwa tingkat kemiripan antar data sulit dibedakan, sehingga menghasilkan rekomendasi yang kurang akurat atau tidak relevan."""

judul = "Big Data and Hadoop for Beginners - with Hands-on!"
rekomendasi_kursus(judul, cosine_sim_df_2)

"""Tampak bahwa pada percobaan diatas, ketika dimasukan judul sebuah course, didapatkan 5 rekomendasi dari yang tertinggi.

Input : "Big Data and Hadoop for Beginners - with Hands-on!"

Rekomendasi tertinggi : "hands-on hadoop masterclass - tame the big data!"

dengan kesamaan 74%

# Evaluasi

Pada tahap ini akan dilakukan evaluasi terhadap Kedua Pendekatan tersebut. Kita akan menggunakan rating sebagai proxy relevansi, dmna :
1. Kursus dianggap relevan jika rating >= 4.0

2. Kursus dianggap tidak relevan jika rating < 4.0

Langkah-Langkah :
1. Ambil rekomendasi dari fungsi yang sudha dibuat sebelumnya.
2. Tentukan relevansi dari hasil rekomendasi berdasarkan rating.
3. Hitung matrik evaluasi : Precision, Recall, F1, NDCG
"""

def evaluasi_rekomendasi(judul_input, df, similarity_df, k=5, rating_threshold=4.0):
    judul_input = judul_input.strip().lower()
    rekomendasi_with_score = rekomendasi_kursus(judul_input, similarity_df, top_n=k)
    rekomendasi = [judul for judul, _ in rekomendasi_with_score]

    # Ambil rating dari judul yang direkomendasikan
    rekomendasi_rating = df[df['title'].isin(rekomendasi)]['rating']
    relevansi = [1 if r >= rating_threshold else 0 for r in rekomendasi_rating]

    precision = sum(relevansi) / k
    total_relevan_aktual = df[df['rating'] >= rating_threshold]
    recall = sum(relevansi) / len(total_relevan_aktual) if len(total_relevan_aktual) > 0 else 0
    f1 = 2 * precision * recall / (precision + recall) if (precision + recall) else 0

    def ndcg_at_k(relevansi, k):
        relevansi = np.array(relevansi)[:k]
        dcg = np.sum((2 ** relevansi - 1) / np.log2(np.arange(2, relevansi.size + 2)))
        ideal_relevansi = np.sort(relevansi)[::-1]
        idcg = np.sum((2 ** ideal_relevansi - 1) / np.log2(np.arange(2, ideal_relevansi.size + 2)))
        return dcg / idcg if idcg > 0 else 0.0

    ndcg = ndcg_at_k(relevansi, k)

    return {
        'Precision': round(precision, 3),
        'Recall': round(recall, 3),
        'F1': round(f1, 3),
        'NDCG': round(ndcg, 3),
        'Relevansi': relevansi,
        'Rekomendasi': rekomendasi_with_score
    }

"""## Hybrid"""

judul = "hands-on hadoop masterclass - tame the big data!"
hasil = evaluasi_rekomendasi(judul, df_new, cosine_sim_df, k=5)

print("Evaluasi Rekomendasi:")
for key, value in hasil.items():
    if key not in ['Relevansi', 'Rekomendasi']:
        print(f"{key}: {value}")
print("\nRekomendasi Judul:", hasil['Rekomendasi'])
print("Relevansi:", hasil['Relevansi'])

"""Berdasarkan hasil rekomendasi, dapat dijelaskan sebagai berikut :
- Precision 0.8 = Dari 5 rekomendasi yang diberikan, 80% (yaitu 4 dari 5) memiliki rating tinggi (≥ 4.0).
- Recall: 0.001 = Dari seluruh kursus dengan rating ≥ 4.0 di dataset (df_new), hanya 0.1% yang berhasil direkomendasikan.
- F1-score: 0.001 = Skor gabungan antara precision dan recall juga rendah karena recall-nya sangat rendah, meskipun precision-nya bagus.
- NDCG (Normalized Discounted Cumulative Gain): 0.983 = Urutan rekomendasi sangat baik. Judul-judul yang relevan (bernilai tinggi) muncul di urutan atas daftar rekomendasi.


Relevansi: [1, 1, 1, 0, 1]

Empat dari lima rekomendasi (baris ke-0, 1, 2, dan 4) punya rating ≥ 4.0, ditandai dengan angka 1 pada Relevansi.

Hanya satu yang tidak relevan (0 → baris ke-3: "hands-on pyspark...").

## Umum
"""

judul = "hands-on hadoop masterclass - tame the big data!"
hasil = evaluasi_rekomendasi(judul, df_new, cosine_sim_df_2, k=5)

print("Evaluasi Rekomendasi:")
for key, value in hasil.items():
    if key not in ['Relevansi', 'Rekomendasi']:
        print(f"{key}: {value}")
print("\nRekomendasi Judul:", hasil['Rekomendasi'])
print("Relevansi:", hasil['Relevansi'])

"""Berdasarkan hasil rekomendasi, dapat dijelaskan sebagai berikut :
- Precision 1 = Dari 5 rekomendasi yang diberikan, 100% (yaitu 5 dari 5) memiliki rating tinggi (≥ 4.0).
- Recall: 0.001 = Dari seluruh kursus dengan rating ≥ 4.0 di dataset (df_new), hanya 0.1% yang berhasil direkomendasikan.
- F1-score: 0.002 = Skor gabungan antara precision dan recall juga rendah karena recall-nya sangat rendah, meskipun precision-nya bagus.
- NDCG (Normalized Discounted Cumulative Gain): 1 = Urutan rekomendasi sangat baik. Judul-judul yang relevan (bernilai tinggi) muncul di urutan atas daftar rekomendasi.


Relevansi: [1, 1, 1, 1, 1]

lima rekomendasi (baris ke-0, 1, 2, dan 4) punya rating ≥ 4.0, ditandai dengan angka 1 pada Relevansi.

"""

